[Script Info]
; Script generated by Aegisub 3.0.1
; http://www.aegisub.org/
Title: Default Aegisub file
ScriptType: v4.00+
WrapStyle: 0
PlayResX: 1280
PlayResY: 720
ScaledBorderAndShadow: yes
Audio File: ?video
Video File: ?dummy:23.976000:9000:1280:720:247:237:237:
Video Aspect Ratio: c1.77778
Video Zoom: 4
Video Position: 254
Scroll Position: 0
Active Line: 28
Video Zoom Percent: 0.5
YCbCr Matrix: None
Last Style Storage: Default

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: romaji-furigana,Arial,22.5,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.5,1.5,8,20,20,30,1
Style: trans-eng-furigana,Arial,22.5,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.5,1.5,2,20,20,15,1
Style: trans-furigana,Arial,22.5,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.5,1.5,2,20,20,15,1
Style: hangul-furigana,Arial,22.5,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.5,1.5,2,20,20,68,1
Style: Default-furigana,Arial,15,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,1.5,1.5,2,20,20,15,1
Style: Default,Arial,30,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,3,3,2,20,20,15,1
Style: hangul,Arial,45,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,3,3,2,20,20,68,1
Style: trans,Arial,45,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,3,3,2,20,20,15,1
Style: furigana,Arial,45,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,3,3,8,20,20,30,1
Style: trans-eng,Segoe Script,70,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,0,0,0,0,100,100,0,0,1,3,3,2,20,20,30,1
Style: romaji,Arial,45,&H00FFFFFF,&H000000FF,&H00000000,&H00000000,-1,0,0,0,100,100,0,0,1,3,3,8,20,20,30,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
Comment: 0,0:00:00.00,0:00:00.00,Default,▼CODE LINES▼,0,0,0,,this script has these font data abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ?!',.()
Comment: 0,0:00:00.00,0:00:00.00,Default,dialog,0,0,0,code once,config={} handwritting_conf = {[1] = { class = "label"; x = 0; y = 0; height = 1; width = 4; label = "Input font size when you created the font data" },[2] = { name = "font_size"; class = "intedit"; x = 0; y = 1; height = 1; width = 2; step = 1; value = 500 }, [3] = { class = "label"; x = 0; y = 2; height = 1; width = 4; label = "font quality : 1 high<----- 3 ---->low 5"}, [4] = { name = "fq"; class = "floatedit"; x = 0; y = 3; height =1 ; width = 2; min = 1; max = 5 ;step = 0.5; value = 3},[5] = { class = "label"; x = 0; y = 4; height =1; width = 4; label = "line  thickness : 3  thin<----- 5 ----->thick 8"},[6] = { name = "thickness"; class = "intedit"; x = 0; y =5; height = 1; width = 2; min = 3; max = 8; step = 1; value = 5},[7] = { class = "label"; x = 0; y = 6; height = 1; width = 1; label ="Border" },[8] = { name = "border"; class = "floatedit"; x = 1; y = 6;  height = 1; width = 1; min = 0; max = 5; step = 0.1; value = 0},[9] = { class = "label"; x = 0; y = 7; heifgt = 1; width = 1; label ="border color"},[10] = { name = "border_color"; class = "color"; x = 1; y =  7; height = 2; width = 1; value ="#000000"},[11] = { class = "label" ; x = 0; y = 9; height = 1; width = 1; label = "Text color"},[12] ={ name = "text_color"; class = "color"; x = 1; y =  9; height = 2; width = 1; value ="#FFFFFF"} }
Comment: 0,0:00:00.00,0:00:00.00,Default,dialog,0,0,0,code once,cfg_res,config=_G.aegisub.dialog.display(handwritting_conf)
Comment: 0,0:00:00.00,0:00:00.00,Default,dialog,0,0,0,code once,function asscolor(htmlcolor) local r, g, b = string.match(htmlcolor, "(%x%x)(%x%x)(%x%x)") return _G.ass_color(_G.tonumber(r,16), _G.tonumber(g,16), _G.tonumber(b,16)) end
Comment: 0,0:00:00.00,0:00:00.00,Default,dialog,0,0,0,code once,if cfg_res == true then font_size = config.font_size fq = config.fq thickness = config.thickness border = config.border border_color= asscolor(config.border_color) text_color = asscolor(config.text_color) else font_size =  500 fq = 3 thickness = 5 boder = false border_color = "&H000000&" text_color = "&HFFFFFF&" end
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,code once,fxgroup.border=(border>0)
Comment: 0,0:00:00.00,0:00:00.00,Default,Get Scr Resolution,0,0,0,code once,xres, yres = _G.aegisub.video_size() ratio = meta.res_y/720  if (xres and xres ~= meta.res_x) or (yres and yres ~= meta.res_y) then _G.aegisub.debug.out(2, "Warning: script resolution %dx%d does not match with loaded video resolution %dx%d resample script resolution(menu>subtitles>resample resolution>click from video)", meta.res_x, meta.res_y, xres, yres) end
Comment: 0,0:00:00.00,0:00:00.00,Default,Get Frame Dur,0,0,0,code once,msa = _G.aegisub.ms_from_frame(1) msb = _G.aegisub.ms_from_frame(101) if msa == nil and msb == nil then _G.aegisub.debug.out(2, "Warning: Please load the video or use dummy video.Frame duration was provisionally set to 33 milliseconds. ") frame_dur = 33  else frame_dur = (msb-msa)/100 end
Comment: 0,0:00:00.00,0:00:00.00,Default,char counter,0,0,0,code once,function char_counter(ref) ci[ref] = ci[ref] + 1; return "" end
Comment: 0,0:00:00.00,0:00:00.00,Default,char counter,0,0,0,code line all,ci = {0,0,0,0}  cn = _G.unicode.len(line.text_stripped:gsub("",""))
Comment: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,code syl all,t = 0
Comment: 0,0:00:00.00,0:00:00.00,Default,HandWriting,0,0,0,code once,function Vector_Move2(p1,...) a = {...} if #a == 5 then base_pos_x = p1 base_pos_y = a[1] max_space = a[2] scale_x = a[3] scale_y = a[4] s = a[5]  if (j == 1) then  t = 0 pos_x = {} pos_y = {} c_point_x = {} c_point_y = {} point = {} i = 1 s:gsub("(%S+)", function(w) point[i] = w i = i + 1 end)  i = 1 m = 0  scale_x = scale_x / 100 scale_y = scale_y / 100 lpos_x = point[2]*scale_x+base_pos_x lpos_y = point[3]*scale_y+base_pos_y  while i <= #point do c_point_x = {} c_point_y = {} if point[i] == "m" then s_point_x = point[i+1] s_point_y = point[i+2] i = i + 3 ldist = 0 elseif point[i] == "b" then c_point_x[1] = s_point_x*scale_x+base_pos_x c_point_y[1] = s_point_y*scale_y+base_pos_y for k = 2, 4, 1 do c_point_x[k] = point[i+1+(k-2)*2]*scale_x+base_pos_x c_point_y[k] = point[i+2+(k-2)*2]*scale_y+base_pos_y end s_point_x = point[i+5] s_point_y = point[i+6] i = i + 7 elseif point[i] == "l" then  c_point_x[1] = s_point_x*scale_x+base_pos_x c_point_y[1] = s_point_y*scale_y+base_pos_y c_point_x[2] = point[i+1]*scale_x+base_pos_x c_point_y[2] = point[i+2]*scale_y+base_pos_y s_point_x = point[i+1] s_point_y = point[i+2] i = i + 3 else _G.aegisub.debug.out("Unknown drawing command. You can use only \"m\" , \"b\" , \"l\"^^;") i = #point+1 end    c_t = 0 n = #c_point_x if n ~= 0 then  while c_t >=0 and c_t < 1 do m = m + 1   if c_t == 0 then   if c_point_x[1] == lpos_x and c_point_y[1] == lpos_y then pos_x[m],pos_y[m] = Bezier(n,c_point_x,c_point_y,0.1)   dist = math.sqrt(math.abs(pos_x[m]-c_point_x[1])^2+math.abs(pos_y[m]-c_point_y[1])^2) if dist == 0 then c_t = 1 else c_t =  (max_space-ldist)/dist*0.1   pos_x[m], pos_y[m] = Bezier(n,c_point_x,c_point_y,c_t) n_x, n_y = Bezier(n,c_point_x,c_point_y,c_t+0.1) dist = math.sqrt(math.abs(n_x-pos_x[m])^2+math.abs(n_y-pos_y[m])^2) c_t = c_t + max_space/dist*0.1 end  else pos_x[m], pos_y[m] = c_point_x[1],c_point_y[1]   n_x, n_y = Bezier(n,c_point_x,c_point_y,c_t+0.1) dist = math.sqrt(math.abs(n_x-pos_x[m])^2+math.abs(n_y-pos_y[m])^2) if dist == 0 then c_t = 1 else c_t = c_t + max_space/dist*0.1 end  end else pos_x[m], pos_y[m] = Bezier(n,c_point_x,c_point_y,c_t)   n_x, n_y = Bezier(n,c_point_x,c_point_y,c_t+0.1) dist = math.sqrt(math.abs(n_x-pos_x[m])^2+math.abs(n_y-pos_y[m])^2) if dist == 0 then c_t = 1 else c_t = c_t + max_space/dist*0.1  end    end end lpos_x,lpos_y =  Bezier(n,c_point_x,c_point_y,1)   ldist = math.sqrt(math.abs(lpos_x-pos_x[m])^2+math.abs(lpos_y-pos_y[m])^2)   if ldist > max_space then ldist = max_space end end end maxloop(m)  end t =  j/m  return  string.format("%f,%f",pos_x[j],pos_y[j])  elseif #a == 11 then s_time = p1 e_time = a[1] afterimage_dur = a[2] x_blur = a[3] y_blur = a[4] accel = a[5] base_pos_x = a[6]  base_pos_y = a[7] max_space = a[8] scale_x = a[9] scale_y = a[10] s = a[11] if (j == 1) then  t = 0 pos_x = {} pos_y = {} if (afterimage_dur < 0 ) then afterimage_dur = 0 end c_point_x = {} c_point_y = {} point = {} i = 1 s:gsub("(%S+)", function(w) point[i] = w i = i + 1 end) dur = e_time-s_time i = 1 m = 0  scale_x = scale_x / 100 scale_y = scale_y / 100 lpos_x = point[2]*scale_x+base_pos_x lpos_y = point[3]*scale_y+base_pos_y while i <= #point do c_point_x = {} c_point_y = {} if point[i] == "m" then s_point_x = point[i+1] s_point_y = point[i+2] i = i + 3 ldist = 0 elseif point[i] == "b" then  c_point_x[1] = s_point_x*scale_x+base_pos_x c_point_y[1] = s_point_y*scale_y+base_pos_y for k = 2, 4, 1 do c_point_x[k] = point[i+1+(k-2)*2]*scale_x+base_pos_x c_point_y[k] = point[i+2+(k-2)*2]*scale_y+base_pos_y end s_point_x = point[i+5] s_point_y = point[i+6] i = i + 7 elseif point[i] == "l" then  c_point_x[1] = s_point_x*scale_x+base_pos_x c_point_y[1] = s_point_y*scale_y+base_pos_y c_point_x[2] = point[i+1]*scale_x+base_pos_x c_point_y[2] = point[i+2]*scale_y+base_pos_y s_point_x = point[i+1] s_point_y = point[i+2] i = i + 3 else _G.aegisub.debug.out("Unknown drawing command. You can use only \"m\" , \"b\" , \"l\"^^;") i = #point+1 end    c_t = 0 n = #c_point_x if n ~= 0 then  while c_t >=0 and c_t < 1 do m = m + 1   if c_t == 0 then   if c_point_x[1] == lpos_x and c_point_y[1] == lpos_y then pos_x[m],pos_y[m] = Bezier(n,c_point_x,c_point_y,0.1)   dist = math.sqrt(math.abs(pos_x[m]-c_point_x[1])^2+math.abs(pos_y[m]-c_point_y[1])^2) if dist == 0 then c_t = 1 else c_t =  (max_space-ldist)/dist*0.1   pos_x[m], pos_y[m] = Bezier(n,c_point_x,c_point_y,c_t) n_x, n_y = Bezier(n,c_point_x,c_point_y,c_t+0.1) dist = math.sqrt(math.abs(n_x-pos_x[m])^2+math.abs(n_y-pos_y[m])^2) c_t = c_t + max_space/dist*0.1 end  else pos_x[m], pos_y[m] = c_point_x[1],c_point_y[1]   n_x, n_y = Bezier(n,c_point_x,c_point_y,c_t+0.1) dist = math.sqrt(math.abs(n_x-pos_x[m])^2+math.abs(n_y-pos_y[m])^2) if dist == 0 then c_t = 1 else c_t = c_t + max_space/dist*0.1 end  end else pos_x[m], pos_y[m] = Bezier(n,c_point_x,c_point_y,c_t)   n_x, n_y = Bezier(n,c_point_x,c_point_y,c_t+0.1) dist = math.sqrt(math.abs(n_x-pos_x[m])^2+math.abs(n_y-pos_y[m])^2) if dist == 0 then c_t = 1 else c_t = c_t + max_space/dist*0.1 end    end end lpos_x,lpos_y =  Bezier(n,c_point_x,c_point_y,1)   ldist = math.sqrt(math.abs(lpos_x-pos_x[m])^2+math.abs(lpos_y-pos_y[m])^2)  if ldist > max_space then ldist = max_space end end end maxloop(m) end retime("presyl",s_time+dur*(t^accel),s_time+dur*((t+1/m)^accel)+afterimage_dur) t = j/m  return  string.format("\\move(%f,%f,%f,%f,%f,%f)",pos_x[j],pos_y[j],pos_x[j]+x_blur,pos_y[j]+y_blur,afterimage_dur/2,afterimage_dur) else _G.aegisub.debug.out("Invalid Parameters...%s",syl.text) end end
Comment: 0,0:00:00.00,0:00:00.00,Default,Draw pen Function,0,0,0,code once,function Draw_pen(p1,...) a = {...} if #a == 5 then base_pos_x = p1 base_pos_y = a[1] max_space = a[2] scale_x = a[3] scale_y = a[4] s = a[5]  if (j == 1) then  t = 0 pos_x = {} pos_y = {} c_point_x = {} c_point_y = {} point = {} i = 1 s:gsub("(%S+)", function(w) point[i] = w i = i + 1 end)  i = 1 m = 0  scale_x = scale_x / 100 scale_y = scale_y / 100 lpos_x = point[2]*scale_x+base_pos_x lpos_y = point[3]*scale_y+base_pos_y  while i <= #point do c_point_x = {} c_point_y = {} if point[i] == "m" then s_point_x = point[i+1] s_point_y = point[i+2] i = i + 3 ldist = 0 elseif point[i] == "b" then c_point_x[1] = s_point_x*scale_x+base_pos_x c_point_y[1] = s_point_y*scale_y+base_pos_y for k = 2, 4, 1 do c_point_x[k] = point[i+1+(k-2)*2]*scale_x+base_pos_x c_point_y[k] = point[i+2+(k-2)*2]*scale_y+base_pos_y end s_point_x = point[i+5] s_point_y = point[i+6] i = i + 7 elseif point[i] == "l" then  c_point_x[1] = s_point_x*scale_x+base_pos_x c_point_y[1] = s_point_y*scale_y+base_pos_y c_point_x[2] = point[i+1]*scale_x+base_pos_x c_point_y[2] = point[i+2]*scale_y+base_pos_y s_point_x = point[i+1] s_point_y = point[i+2] i = i + 3 else _G.aegisub.debug.out("Unknown drawing command. You can use only \"m\" , \"b\" , \"l\"^^;") i = #point+1 end    c_t = 0 n = #c_point_x if n ~= 0 then  while c_t >=0 and c_t < 1 do m = m + 1   if c_t == 0 then   if c_point_x[1] == lpos_x and c_point_y[1] == lpos_y then pos_x[m],pos_y[m] = Bezier(n,c_point_x,c_point_y,0.1)   dist = math.sqrt(math.abs(pos_x[m]-c_point_x[1])^2+math.abs(pos_y[m]-c_point_y[1])^2) if dist == 0 then c_t = 1 else c_t =  (max_space-ldist)/dist*0.1   pos_x[m], pos_y[m] = Bezier(n,c_point_x,c_point_y,c_t) n_x, n_y = Bezier(n,c_point_x,c_point_y,c_t+0.1) dist = math.sqrt(math.abs(n_x-pos_x[m])^2+math.abs(n_y-pos_y[m])^2) c_t = c_t + max_space/dist*0.1 end  else pos_x[m], pos_y[m] = c_point_x[1],c_point_y[1]   n_x, n_y = Bezier(n,c_point_x,c_point_y,c_t+0.1) dist = math.sqrt(math.abs(n_x-pos_x[m])^2+math.abs(n_y-pos_y[m])^2) if dist == 0 then c_t = 1 else c_t = c_t + max_space/dist*0.1 end  end else pos_x[m], pos_y[m] = Bezier(n,c_point_x,c_point_y,c_t)   n_x, n_y = Bezier(n,c_point_x,c_point_y,c_t+0.1) dist = math.sqrt(math.abs(n_x-pos_x[m])^2+math.abs(n_y-pos_y[m])^2) if dist == 0 then c_t = 1 else c_t = c_t + max_space/dist*0.1  end    end end lpos_x,lpos_y =  Bezier(n,c_point_x,c_point_y,1)   ldist = math.sqrt(math.abs(lpos_x-pos_x[m])^2+math.abs(lpos_y-pos_y[m])^2)   if ldist > max_space then ldist = max_space end end end   end t =  j/m  return  "" elseif #a == 11 then s_time = p1 e_time = a[1] afterimage_dur = a[2] x_blur = a[3] y_blur = a[4] accel = a[5] base_pos_x = a[6]  base_pos_y = a[7] max_space = a[8] scale_x = a[9] scale_y = a[10] s = a[11] if (j == 1) then  t = 0 pos_x = {} pos_y = {} if (afterimage_dur < 0 ) then afterimage_dur = 0 end c_point_x = {} c_point_y = {} point = {} i = 1 s:gsub("(%S+)", function(w) point[i] = w i = i + 1 end) dur = e_time-s_time i = 1 m = 0  scale_x = scale_x / 100 scale_y = scale_y / 100 lpos_x = point[2]*scale_x+base_pos_x lpos_y = point[3]*scale_y+base_pos_y while i <= #point do c_point_x = {} c_point_y = {} if point[i] == "m" then s_point_x = point[i+1] s_point_y = point[i+2] i = i + 3 ldist = 0 elseif point[i] == "b" then  c_point_x[1] = s_point_x*scale_x+base_pos_x c_point_y[1] = s_point_y*scale_y+base_pos_y for k = 2, 4, 1 do c_point_x[k] = point[i+1+(k-2)*2]*scale_x+base_pos_x c_point_y[k] = point[i+2+(k-2)*2]*scale_y+base_pos_y end s_point_x = point[i+5] s_point_y = point[i+6] i = i + 7 elseif point[i] == "l" then  c_point_x[1] = s_point_x*scale_x+base_pos_x c_point_y[1] = s_point_y*scale_y+base_pos_y c_point_x[2] = point[i+1]*scale_x+base_pos_x c_point_y[2] = point[i+2]*scale_y+base_pos_y s_point_x = point[i+1] s_point_y = point[i+2] i = i + 3 else _G.aegisub.debug.out("Unknown drawing command. You can use only \"m\" , \"b\" , \"l\"^^;") i = #point+1 end    c_t = 0 n = #c_point_x if n ~= 0 then  while c_t >=0 and c_t < 1 do m = m + 1   if c_t == 0 then   if c_point_x[1] == lpos_x and c_point_y[1] == lpos_y then pos_x[m],pos_y[m] = Bezier(n,c_point_x,c_point_y,0.1)   dist = math.sqrt(math.abs(pos_x[m]-c_point_x[1])^2+math.abs(pos_y[m]-c_point_y[1])^2) if dist == 0 then c_t = 1 else c_t =  (max_space-ldist)/dist*0.1   pos_x[m], pos_y[m] = Bezier(n,c_point_x,c_point_y,c_t) n_x, n_y = Bezier(n,c_point_x,c_point_y,c_t+0.1) dist = math.sqrt(math.abs(n_x-pos_x[m])^2+math.abs(n_y-pos_y[m])^2) c_t = c_t + max_space/dist*0.1 end  else pos_x[m], pos_y[m] = c_point_x[1],c_point_y[1]   n_x, n_y = Bezier(n,c_point_x,c_point_y,c_t+0.1) dist = math.sqrt(math.abs(n_x-pos_x[m])^2+math.abs(n_y-pos_y[m])^2) if dist == 0 then c_t = 1 else c_t = c_t + max_space/dist*0.1 end  end else pos_x[m], pos_y[m] = Bezier(n,c_point_x,c_point_y,c_t)   n_x, n_y = Bezier(n,c_point_x,c_point_y,c_t+0.1) dist = math.sqrt(math.abs(n_x-pos_x[m])^2+math.abs(n_y-pos_y[m])^2) if dist == 0 then c_t = 1 else c_t = c_t + max_space/dist*0.1 end    end end lpos_x,lpos_y =  Bezier(n,c_point_x,c_point_y,1)   ldist = math.sqrt(math.abs(lpos_x-pos_x[m])^2+math.abs(lpos_y-pos_y[m])^2)  if ldist > max_space then ldist = max_space end end end end retime("presyl",s_time+dur*(t^accel),s_time+dur*((t+1/m)^accel)+afterimage_dur) t = j/m  return  string.format("\\move(%f,%f,%f,%f,%f,%f)",pos_x[j],pos_y[j],pos_x[j]+x_blur,pos_y[j]+y_blur,afterimage_dur/2,afterimage_dur) else _G.aegisub.debug.out("Invalid Parameters...") end end
Comment: 0,0:00:00.00,0:00:00.00,Default,Bezier Function,0,0,0,code once,function Bezier(n,x,y,t) p_x = 0 p_y = 0 for i = 1, n, 1 do p_y = p_y + y[i] * remember("bern",bernstein(i-1,n-1,t)) p_x = p_x + x[i] * recall.bern  end return p_x, p_y  end
Comment: 0,0:00:00.00,0:00:00.00,Default,Bezier Function,0,0,0,code once,function bernstein(i,n,t) return (factk(n) / (factk(i)*factk(n-i))) * (t^i) * ((1-t)^(n-i)) end
Comment: 0,0:00:00.00,0:00:00.00,Default,Bezier Function,0,0,0,code once,function factk(n) k = 1 if (n > 1) then for i = 2, n, 1 do k = k * i end end return k end
Comment: 0,0:00:00.00,0:00:00.00,Default,Font  Data,0,0,0,code once,font= {[97]="m 116 196 b 50 181 -9 319 25 332 b 98 342 157 225 118 198 b 140 225 110 288 136 305 b 197 319 233 259 252 240";[98]="m 68 104 b 42 170 38 286 44 336 b 78 208 122 205 148 198 b 214 234 133 339 70 356 b 112 320 222 264 262 228 ";[99]="m 102 233 b 98 222 90 201 86 190 b 56 186 -6 242 30 328 b 134 359 179 263 214 235 ";[100]="m 128 240 b 140 217 130 185 108 182 b 45 184 4 296 16 332 b 103 346 176 177 168 104 b 164 140 164 198 152 249 b 149 360 207 319 264 238 ";[101]="m 43 281 b 59 251 126 223 104 168 b -10 219 39 313 49 329 b 119 336 168 292 212 240";[102]=" m 126 169 b 145 108 110 118 92 124 b 62 184 64 300 51 352 b 41 392 22 436 3 409 m 41 243 b 89 248 141 238 174 230";[103]="m 121 187 b 68 186 38 247 24 284 b 15 372 100 284 116 265 b 119 248 125 214 128 196 b 123 237 114 319 110 360 b 97 414 49 430 1 380 ";[104]="m 62 110 b 56 171 43 292 36 353 b 57 324 98 267 118 238 b 190 162 156 269 169 280 b 174 377 270 268 299 241 ";[105]="m 52 209 b 50 231 37 274 44 296 b 68 403 161 272 192 238 m 76 108 b 74 115 70 129 68 136 ";[106]="m 67 198 b 46 218 54 301 49 336 b 48 368 58 429 0 409 m 84 108 b 84 115 82 129 81 136 ";[107]="m 65 112 b 58 170 42 287 35 345 b 39 333 48 308 52 296 b 78 268 130 213 156 185 b 136 209 95 256 75 280 b 88 291 113 314 126 326 b 201 369 225 254 267 235 ";[108]="m 68 110 b 62 148 48 223 41 260 b 48 386 145 302 177 252 ";[109]="m 56 198 b 52 222 46 271 43 296 b 42 383 78 275 89 268 b 145 154 152 244 160 264 b 144 377 193 259 204 257 b 261 153 245 262 259 264 b 259 374 340 262 368 236 ";[110]="m 54 200 b 50 214 41 242 36 256 b 25 369 75 256 88 256 b 168 163 140 266 158 270 b 179 380 255 266 288 235 ";[111]="m 100 190 b 75 187 47 219 25 280 b 5 363 84 331 108 308 b 144 285 152 237 107 193 b 168 250 193 240 240 219 ";[112]="m 43 209 b 39 259 32 358 28 408 b 33 377 43 315 48 284 b 89 209 145 166 163 206 b 194 255 114 310 81 320 b 132 307 224 262 264 230 ";[113]="m 123 216 b 163 186 132 176 107 177 b 68 192 29 241 22 281 b 13 367 82 286 102 280 b 113 266 136 238 140 214 b 134 268 102 359 96 400 b 133 360 218 288 246 243 ";[114]="m 54 203 b 51 238 30 318 43 344 b 79 248 118 193 169 222 ";[115]="m 76 190 b 59 199 38 206 44 244 b 54 272 73 297 91 315 b 71 331 32 350 16 363 b 65 344 149 281 180 236 ";[116]="m 89 123 b 78 166 62 262 49 302 b 31 347 48 362 67 355 m 1 235 b 48 238 153 225 187 204 ";[117]="m 54 208 b 45 276 12 346 88 320 b 118 291 161 228 171 192 b 158 272 168 311 208 297 b 245 286 279 248 294 220 ";[118]="m 56 208 b 52 215 41 226 43 236 b 53 265 84 318 83 350 b 99 319 132 258 148 227 b 181 262 218 234 241 225 ";[119]="m 46 211 b 49 237 56 290 59 316 b 87 402 101 285 115 275 b 165 147 150 280 161 281 b 201 402 204 279 219 278 b 227 263 238 221 251 217 b 295 261 319 230 344 212 ";[120]="m 150 211 b 137 245 104 282 76 304 b 61 318 18 342 43 372 m 51 214 b 61 266 98 298 118 315 b 198 362 228 255 265 235 ";[121]="m 62 200 b 51 220 39 251 38 276 b 60 371 118 292 140 278 b 155 266 164 217 172 196 b 165 240 156 332 142 372 b 102 448 46 399 28 374 ";[122]="m 35 208 b 48 211 72 227 86 220 b 116 223 134 213 150 211 b 124 252 61 314 27 350 b 84 304 91 335 113 332 b 161 352 171 319 190 315 ";[65]="m 172 113 b 160 136 145 180 121 204 b 89 250 44 367 3 342 m 164 137 b 177 174 203 249 216 286 b 224 307 240 326 248 339 m 80 276 b 110 271 172 260 203 254 ";[66]="m 64 144 b 60 189 54 279 51 324 m 62 150 b 102 136 244 83 193 180 b 162 201 125 210 110 219 b 194 206 244 244 196 310 b 163 352 116 356 88 342 ";[67]="m 176 179 b 182 166 194 142 200 129 b 150 86 54 195 38 256 b 5 443 207 310 260 244 ";[68]="m 70 142 b 65 173 56 236 51 267 b 45 284 57 308 62 326 m 57 140 b 96 142 175 135 214 148 b 300 212 210 269 161 292 b 134 300 80 316 52 324 ";[69]="m 64 140 b 107 142 207 146 233 123 m 67 137 b 70 196 49 284 36 332 m 59 230 b 92 228 165 234 190 214 m 40 331 b 85 325 184 322 222 307 ";[70]="m 56 137 b 89 136 179 106 190 132 m 56 137 b 72 151 30 296 43 347 m 46 260 b 77 253 140 238 171 230 ";[71]="m 236 142 b 232 135 223 122 219 115 b 154 114 68 168 43 220 b 5 349 70 335 128 320 b 202 287 221 253 216 240 b 208 288 171 347 190 361 ";[72]="m 68 113 b 69 171 55 283 40 337 m 56 236 b 94 234 172 229 211 227 m 236 102 b 221 131 194 302 211 337 ";[73]="m 70 123 b 56 162 42 242 35 281 b 30 311 28 340 48 339";[74]="m 155 121 b 160 166 174 226 144 299 b 120 328 76 348 16 312 ";[75]="m 56 121 b 57 177 40 340 60 345 m 211 129 b 172 161 124 234 54 256 b 119 256 221 324 236 308 ";[76]="m 72 126 b 72 188 50 291 41 345 b 84 331 160 311 200 315 ";[77]="m 36 334 b 28 325 30 292 28 278 b 50 241 68 168 81 131 b 94 181 128 253 150 281 b 187 229 260 120 286 105 b 266 143 263 242 257 288 b 254 309 266 338 275 348 ";[78]="m 38 353 b 47 299 69 206 73 137 b 94 201 166 305 201 342 b 203 280 220 164 240 99 ";[79]="m 153 124 b 107 130 56 171 32 238 b 16 389 113 344 166 312 b 248 227 257 137 158 126 ";[80]="m 88 148 b 64 204 56 312 72 360 m 38 145 b 89 122 161 122 192 123 b 280 133 213 194 176 220 b 146 235 106 248 72 259 ";[81]="m 169 136 b 177 86 67 159 41 220 b 8 354 87 339 126 328 b 215 306 239 238 232 204 b 214 181 193 153 180 136 m 123 281 b 144 307 185 359 206 385 ";[82]="m 64 148 b 92 194 29 318 67 342 m 35 153 b 92 120 141 127 174 131 b 237 163 218 199 195 222 b 165 242 124 248 100 251 b 170 232 215 349 270 344 ";[83]="m 168 168 b 174 159 177 144 169 134 b 138 116 77 133 46 150 b -5 202 59 231 89 235 b 220 264 147 316 89 340 b 54 354 27 346 11 332 ";[84]="m 8 161 b 83 164 188 123 238 136 m 116 158 b 115 203 88 318 110 339 ";[85]="m 62 113 b 33 242 29 328 105 334 b 256 346 188 130 224 123 ";[86]="m 12 113 b 37 169 86 281 110 337 b 116 302 231 166 222 131 ";[87]="m 22 132 b 49 198 65 297 80 352 b 114 307 146 227 168 185 b 184 224 218 300 235 339 b 280 264 307 162 308 100 ";[88]="m 211 126 b 185 110 12 309 6 342 m 48 121 b 90 172 146 328 216 324 ";[89]="m 17 126 b 41 148 84 204 113 212 m 214 84 b 187 116 142 186 107 209 b 106 242 110 310 102 342 ";[90]="m 38 136 b 42 180 181 140 228 142 b 181 162 88 286 20 332 b 68 289 215 302 280 286 ";[63]="m 48 152 b 83 94 133 118 150 142 b 159 239 91 215 65 234 b 62 245 56 265 53 276 m 42 328 b 42 331 40 338 40 341 ";[33]="m 69 122 b 58 142 49 226 42 261 m 41 309 b 39 314 35 323 33 328 ";[39]="m 50 120 b 41 141 23 187 30 217 ";[44]="m 68 298 b 100 330 69 368 26 378 ";[46]="m 37 304 b 37 309 37 321 37 326 ";[40] = "m 110 110 b 97 122 72 147 56 156 b 44 192 30 226 16 252 b 16 283 23 326 30 350 b 50 380 67 393 80 408 ";[41] = "m 14 106 b 26 124 50 160 66 178 b 77 206 84 263 88 292 b 85 310 75 346 64 364 b 51 378 38 400 30 412 ";[32] = "m 0 0 l 0 0 ";[12288] = "m 0 0 l 0 0";}
Comment: 0,0:00:00.00,0:00:00.00,Default,Glitter Function,0,0,0,code once,function glitter(dur)   tag =  string.format("\\t(%d,%d,\\fscx%d\\fscy%d)\\t(%d,%d,\\fscx%d\\fscy%d)\\t(%d,%d,\\fscx%d\\fscy%d)\\t(%d,%d,\\fscx%d\\fscy%d)",remember("time",dur-math.random(500,1000)),recall.time+1,remember("size",math.random(50,100)*ratio),recall.size,recall.time+2,recall.time+100,25*ratio,25*ratio,recall.time+101,recall.time+102,remember("size",math.random(50,100)*ratio),recall.size,recall.time+103,recall.time+200,25*ratio,25*ratio) return tag end
Dialogue: 0,0:00:00.00,0:00:00.00,Default,▼TEMPLATE LINES▼,0,0,0,,
Dialogue: 0,0:00:00.00,0:00:00.00,Default,▼trans-eng▼,0,0,0,,
Comment: 1,0:00:00.00,0:00:00.00,trans-eng,HandWriting,0,0,0,template char notext,!j ==1 and char_counter(1) or ""!!retime("line",remember("start_add",-500+($ldur*0.8/cn)*(ci[1]-1)+($ldur*0.8/cn)*(j==1 and 0 or t)),(syl.text==" " or syl.text=="　") and -($ldur-recall.start_add) or 0)!{\move(!Vector_Move2($left,$top,fq*ratio,line.styleref.fontsize/font_size*100,line.styleref.fontsize/font_size*100,font[_G.unicode.codepoint(syl.text)])!,!pos_x[j]+math.random(-50,50)*ratio!,!pos_y[j]+math.random(-50,50)*ratio!,!line.duration-math.random(500,1000)!,!line.duration!)\an5\fscx!thickness*10*ratio!\fscy!thickness*10*ratio!\1c!text_color!\bord0\shad0\t(!line.duration-math.random(500,1000)!,!line.duration!,\1c!_G.ass_color(_G.HSV_to_RGB(360*(syl.i/$syln)*t,1,1))!!glitter(line.duration)!\fad(0,300)\p1}m 5 0 b -1 0 -1 10 5 10 b 11 10 11 0 5 0
Comment: 0,0:00:00.00,0:00:00.00,trans-eng,Border,0,0,0,template char fxgroup border,!char_counter(3)!!retime("line",-500+($ldur*0.8/cn)*(ci[3]-1)+($ldur*0.8/cn),-800)!{\an5\pos($center,$middle)\fad(300,300)\1a&HFF&\shad0\3c!border_color!\bord!border!\blur3}
Comment: 1,0:00:00.00,0:00:00.00,trans-eng,Pen,0,0,0,template char,!Draw_pen($left,$top,fq*ratio,line.styleref.fontsize/font_size*100,line.styleref.fontsize/font_size*100,font[_G.unicode.codepoint(syl.text)])!!maxloop(math.ceil($ldur*0.8/cn/frame_dur)>m and m or math.ceil($ldur*0.8/cn/frame_dur))!!j==1 and char_counter(2) or ""!!retime("preline",remember("stime",-500+($ldur*0.8/cn)*(ci[2]-1)+(math.ceil(($ldur*0.8/cn)/frame_dur)>m and  m or ($ldur*0.8/cn))*(j==1 and 0 or (j-1)/maxj)),(syl.text==" " or syl.text=="　") and recall.stime or ((math.ceil(($ldur*0.8/cn)/frame_dur)>m and recall.stime+($ldur*0.8/cn)/maxj or recall.stime+frame_dur)))!{\pos(!pos_x[math.floor(j*(m/maxj))]!,!pos_y[math.floor(j*(m/maxj))]!)\an7\fscx!100*ratio!\fscy!100*ratio!\bord0\p1}m 0 0 l 0 -15 l 15 -41 l 20 -41 l 26 -38 l 28 -34 l 13 -8 l 0 0 {\1c&H000000&}m -29 -1 l -29 -4 b -27 -3 -28 -4 -27 -2 l -29 -1 m -9 -40 b -9 -39 -8 -38 -6 -38 b -6 -40 -8 -40 -9 -40  {\1c&H476C21&}m -52 -21 l -37 -47 l -34 -44 l -49 -17 l -52 -20 m -29 -40 l -23 -40 l -39 -13 l -44 -14 l -29 -40  {\1c&H81E716&}m -79 -21 l -63 -48 l -57 -44 l -73 -18 m=!m! maxj=!maxj! indx=!math.floor(j*(m/maxj))! ldur=!line.duration!
Dialogue: 0,0:00:00.00,0:00:00.00,Default,▼KARAOKE LINES▼,0,0,0,,
Comment: 0,0:00:01.08,0:00:02.89,trans-eng,,0,0,0,karaoke,Don't be sorry
Comment: 0,0:00:03.00,0:00:06.27,trans-eng,,0,0,0,karaoke,You can abandon me spitefully and leave
Comment: 0,0:00:06.83,0:00:10.17,trans-eng,,0,0,0,karaoke,If that's what you want, yeah, good bye
Comment: 0,0:00:10.58,0:00:13.89,trans-eng,,0,0,0,karaoke,But that doesn't mean I have given up too
Comment: 0,0:00:14.32,0:00:16.72,trans-eng,,0,0,0,karaoke,My love wins
Comment: 0,0:00:16.75,0:00:20.19,trans-eng,,0,0,0,karaoke,Iya, go first, uhgiya diyuracha
Comment: 0,0:00:20.47,0:00:23.47,trans-eng,,0,0,0,karaoke,Uhgiyadiya I will win her back
Comment: 0,0:00:24.15,0:00:29.85,trans-eng,,0,0,0,karaoke,Even if you're ahead for a bit, I will catch up
Comment: 0,0:00:30.41,0:00:38.01,trans-eng,,0,0,0,karaoke,Protect her, so she won't forget me
Comment: 0,0:00:37.95,0:00:46.29,trans-eng,,0,0,0,karaoke,I will go till the end to the place where my person is
Comment: 0,0:00:46.85,0:00:48.64,trans-eng,,0,0,0,karaoke,Forget it, I knelt down and beat my heart
Dialogue: 0,0:00:00.00,0:00:00.00,Default,,0,0,0,,
